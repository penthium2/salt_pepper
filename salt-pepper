#!/bin/bash

#==============================================================================
# Tool Name: salt-pepper
# Description: Brute force encrypted file with cipher and pass.
# Args: [-f SOURCE FILE] [-k PASSPHRASE]
# More options: 
#		 -t 	test results
#		 -h	display help
#		 -v	display version
#		 -u	return Unicode text file
#		 -a	return ASCII text file
# Authors: penthium2, Julien BRIAULT
# Creation date: 07/12/2019
# Last update: 07/30/2019
# Modification of the option '-t' which outputs the 
# number of files that match for the ascii or unicode format.
# Added option'-u' to display the file that matches in unicode,'-a' for ascii.
#==============================================================================

# Colors var
red="\e[91m"
green="\e[92m"
yellow="\e[93m"
resetcolor="\e[0m"

# Vars 
version="3.7"
authors="penthium2, Julien BRIAULT"

f_main() {
cat << EOF
Usage: ${0##*/} [-f SOURCE FILE] [-p PASS ] [-t]

Brute force encrypted file with cipher and pass

Main options:
	-f	encrypted source file 
	-p	passphrase 
	
More options:
	-t 	test results
	-u	return Unicode text file
	-a	return ASCII text file
	-h	display help
	-v	display version

EOF
exit 0
}

# Random error
f_err() {
cat << EOF
Try '${0##*/} -h' for more informations.
EOF
exit 1
}

# Syntax error
f_syn_err() {
echo -e "${red}Syntax error${resetcolor}"
}

# Test salt
f_cipher() {
declare -i nb=1  

dir=FLAGS

if [[ -d "${dir}" ]]; then 
	echo -e "${yellow}Folder already exist${resetcolor}"
	echo -e "${yellow}Removing all file ?${resetcolor}"
        read -p "Yes/no default Yes" remove
        if [[ "${remove}" = [Yy] || -z "${remove}" ]] ; then
                rm -rf ${dir}/*
        else
                exit 8
        fi

else
	mkdir ${dir}
fi
                                                                             
for cipher in $(openssl list -cipher-commands) ; do                                           
	if openssl  "$cipher" -d -in "${sfile}" -out FLAG  -pass pass:"${pass}" > /dev/null 2>&1 ; then                  		
		mv FLAG ${dir}/FLAG_$cipher
		match[$nb]=$cipher                                                            
		nb+=1                                                                         
		printf "%-50s%s\n" "$cipher~" "~[NOT MATCH]" | tr ' ~' '- '
	fi
done                                                                                          
for result in $(seq ${#match[*]}) ; do
	printf "%-50s%s\n" "${match[$result]}~" "~[MATCH]" | tr ' ~' '- '
done
echo -e "${yellow}All results saved in $dir directory.${resetcolor}"
}

# Tests the number of files that match in unicode and ascii
f_test_results() {
echo -e "\nUnicode file detected: ${yellow}$(file ${dir}/* | grep Unicode | wc -l)${resetcolor}"
echo -e "ASCII file detected: ${yellow}$(file ${dir}/* | grep ASCII | wc -l)${resetcolor}"
}

# Test if is a UTF-8/Unicode file
f_test_unicode() {
if [[ -d "${dir}" ]]; then 
        if [[ "$(file ${dir}/* | grep Unicode | wc -l)" = 0 ]]; then 
                echo -e "\n${red}No result for the file test in Unicode/UTF-8 format.${resetcolor}"
                exit 7
        else    
                for uniresults in $(file ${dir}/* | grep -n Unicode | awk -F":" '{print $2 }' ) ; do
                        echo -e "File found: ${green}$uniresults${resetcolor}"
                done
        fi
else    
        f_err
fi
}

# Test if is a ASCII/US-ASCII file
f_test_ascii() {
if [[ -d "${dir}" ]]; then  
        if [[ "$(file ${dir}/* | grep ASCII | wc -l)" = 0 ]]; then 
                echo -e "\n${red}No result for the file test in ASCII/US-ASCII format.${resetcolor}"
                exit 7
        else    
                for ascresults in $(file ${dir}/* | grep -n ASCII | awk -F":" '{print $2 }' ) ; do
                        echo -e "File found: ${green}$ascresults${resetcolor}"
                done
        fi
else    
        f_err
fi
}

f_check_ver() {
openssl_ver="$(openssl version)"
	# error message if the version is not more than 1.1.*
	f_ver_err() {
		echo -e "${red}Your OpenSSL version is too old: $openssl_ver${resetcolor}"
        	echo -e "Please install version ${yellow}1.1.1 or later${resetcolor}"
        	exit 9
	}

case $openssl_ver in
	*1.0*)
		f_ver_err
		;;
	*0.9*)
		f_ver_err
		;;
	*1.1.0*)
		f_ver_err
		;;
esac
}

f_check_ver

# If no argument
if [[ -z "$1" ]]; then 
	f_err
else
	OPTIND=1

	while getopts "hvuatf:p:" opt; do 
		case $opt in 
			v) 
				if [[ -z "$2" ]]; then 
					echo -e "${0##*/} version ${yellow}$version${resetcolor}"
					echo "Authors: $authors"
				elif [[ "$2" = "-h" ]];then 
					f_syn_err && f_err
				fi
				;;
			h)
				if [[ -z "$2" ]]; then 
					f_main
				elif [[ "$2" = "-v" ]]; then 
					f_syn_err && f_err
				fi
				;;
			f)
				sfile=${OPTARG}
				if [[ -n "${pass}" ]]; then 
					if [[ -f "${sfile}" ]]; then 
						if [[ -r "${sfile}" ]]; then 
							f_cipher
						else
							echo -e "${red}You do not have read access to this file.${resetcolor}"
							exit 5
						fi
					else
						echo -e "${red}The specified value is not a file.${resetcolor}"
						exit 4
					fi
				fi
				;;
			p)
				pass=${OPTARG}
				if [[ -n "${sfile}" ]]; then 
					f_cipher
				fi
				;;
			t)
				f_test_results	
				;;
			u)
				f_test_unicode	
				;;
			a)
				f_test_ascii
				;;
		esac
	done
	shift "$((OPTIND-1))"	
fi
